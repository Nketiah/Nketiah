// Task 1   Add a vertical button bellow all rows
// Task 2  When you click the button, it should select all items in the from top to bottom
// Task 3  allSelections should be "row1|row2|row3"
// Task 4  bet = [[4,5,6,7,8],[0,8,4,2,3],[9,0,1,2,3],[3,5,1,7,8], [2,4,0,5,7]]
// Task  4a  user bet = [5,4,1,6,3]  find this in the bets array
// return true or false
// log the array position in the bets array

// 4b  num = [9]
// find num in bets array return true or false
// log the array position in bets [][]








// Task 1 
// write a program to push 3 random numbers from 0 - 9 to an Array
// const draws [] every 1 minute
// display the draws in the browser
// Put a button on the web page
// onClick of the button  reset the drawing numbers to whatever 
// number is passed in as a parameter to the function

// Task 2
// given this Array of numbers [0,1,2,3,4,5,6,7,8,9]
// copy each of the numbers into a new array [[0],[1], ...]


// Task 3
// Make an Api call to  https://jsonplaceholder.typicode.com/posts every 1 minute
// display the results in the browser in a tabular form
// Using Promise



// Saturday task
// given a function that accepts an input as parameter
// if the input is divisible by 3 and 5 return "FizzBuzz"
// if the input is divisible by 3 return "Fizz"
// if the input is divisible by 5 return "Buzz"
// if the input is not divisible by 3 or 5 or 3 and 5 return  input
// if the input is not a number or integer retun NaN


// a Write a program to fetch  data from https://jsonplaceholder.typicode.com/users
//   Every one minute
//   display the result in html table
//   using Promise

// b write a program to push 3 random numbers from 0 - 9 to an Array
//   const draws [] every 1 minute
//   display the draws in the browser
//   Put a button on the web page
//   onClick of the button  reset the drawing numbers to whatever 
//   number is passed in as a parameter to the function


// c given this Array of numbers [0,1,2,3,4,5,6,7,8,9]
//   copy each of the numbers into a new array [[0],[1], ...]




// Task 1
// use case 
// Select 3 numbers to form 1 bet
// if you select 6 numbers you get 20 as the total bet
// Write a function to calculate the total bet
// using this sample

// Task 2
// use case
// Select 1 number to form 1 bet
// Write a function to calculate the total bet
// from five rows [row1, row2, row3, row4, row5]

// Task 3 
// allSelections Array = [] = "1,2|4,6|7,3||"

// Task 4 
// 0,1,2,3,4,5,6,7,8,9
// Write permutation for

// Task 5
// use case 
// Select 4 numbers to form 1 bet
// if you select 6 numbers you get 30 as the total bet
// Write a function to calculate the total bet
// using this sample
AIzaSyAy9xR_ioh6A7CZdMDsSaVm0xkaBhTaMU8




import React, { useState } from 'react'
import { TfiPencilAlt } from "react-icons/tfi"
import { BiUser } from "react-icons/bi"
import { RiDeleteBin2Line } from "react-icons/ri"
import { createStyles, Box, TextInput, Flex, Tooltip, FileInput, Select } from '@mantine/core'
import { useDisclosure } from '@mantine/hooks'
import { Modal, Button, Group } from '@mantine/core'
import ViewStudentModal from './ViewStudentModal'
import { Controller, useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { UpdateStudentSchema } from '@/validations/student'
import dayjs from 'dayjs'
import { DateInput, YearPickerInput } from '@mantine/dates'
import { IconCalendar } from '@tabler/icons-react'



const useStyles = createStyles((theme) => ({
    editIcon: {
        cursor: "pointer",
        color: theme.colors.dark[2]
    },
    actions: {
        display: "flex",
        gap: 6
    },
    iconColor: {
        color: theme.colors.blue[6]
    }
}))



type UpdateStudentData = z.infer<typeof UpdateStudentSchema>


const EditStudentIcon = ({ row }: { row: Student }) => {

    const [opened, { open, close }] = useDisclosure(false)
    const [modalOpened, { open: modalOpen, close: modalClose }] = useDisclosure(false)
    const [modalOpenedDel, { open: modalOpenDel, close: modalCloseDel }] = useDisclosure(false)
    const [admissionDate, setAdmissionDate] = useState<Date | null>(new Date())
    const [academicYear, setAcademicYear] = useState<Date | null>(new Date())
    const [dob, setDob] = useState<Date | null>(new Date())
    const [photo, setPhoto] = useState<File | null>()
    const { classes } = useStyles()


    const { register, control, handleSubmit, formState, reset: formReset } =
    useForm<UpdateStudentData>({
    resolver: zodResolver(UpdateStudentSchema),
   })

   const { errors, isDirty, isValid } = formState


    const handleModalOpen = () => {
        open()
        console.log("Selected Row: ", row)
    }

    const handleViewStudent = () => {
        modalOpen()
    }

    const handleStudentDelete = () => {
        modalOpenDel()
    }

 const onSubmit = (userData: UpdateStudentData) => {
  const admiDateInput = dayjs(admissionDate)
  const inputYear = dayjs(academicYear, { locale: 'en' })
  const year = inputYear.year()
  const admiInputDate = admiDateInput.format('DD/MM/YY')
  const dobInput = dayjs(dob)
  const formattedDob = dobInput.format('DD/MM/YY')
  const newData = {
    ...userData,
    admissionDate: admiInputDate,
    academicYear: year,
    dob: formattedDob,
  }

    console.log("Student Data: ", userData)
 }



    return (
      <>
        <Box className={classes.actions}>
          <Tooltip label={`Edit ${row.user.firstName}`} withArrow>
            <Box>
              <TfiPencilAlt
                size={20}
                className={classes.editIcon}
                onClick={handleModalOpen}
              />
            </Box>
          </Tooltip>
          <Tooltip label={`View ${row.user.firstName} Information`} withArrow>
            <Box>
              <BiUser
                size={20}
                className={classes.editIcon}
                onClick={handleViewStudent}
              />
            </Box>
          </Tooltip>
          <Tooltip label={`Delete ${row.user.firstName}`} withArrow>
            <Box>
              <RiDeleteBin2Line
                size={20}
                className={classes.editIcon}
                onClick={handleStudentDelete}
              />
            </Box>
          </Tooltip>
        </Box>
        <form>
        <Modal
          opened={opened}
          onClose={close}
          title={`${row.user.firstName + "'s" + ' '}  Details`}
          radius="xs"
          size="xl"
          closeOnClickOutside={false}
          closeOnEscape={false}
          fullScreen
          transitionProps={{ transition: 'fade', duration: 200 }}
        >
            <Flex
             direction={{ base: 'column', sm: 'row' }}
             gap={{ base: 'sm', sm: 'lg' }}
             justify={{ sm: 'center' }}
             >
              {/* <FileInput
                label="Student's Photo"
                required
                value={photo}
                onChange={setPhoto}
                radius={'xs'}
                w={230}
              /> */}
            <Box>
            <YearPickerInput
              icon={<IconCalendar size="1rem" stroke={1.5} />}
              label="Academic Year"
              value={academicYear}
              onChange={setAcademicYear}
              withAsterisk
              radius={'xs'}
              w={230}
            />
          </Box>
          <Box>
            <DateInput
              label="Admission Date"
              valueFormat="DD/MM/YYYY"
              onChange={setAdmissionDate}
              value={admissionDate}
              withAsterisk
              radius={'xs'}
              w={230}
            />
          </Box>
          <Box>
            <Controller
              name="gender"
              control={control}
              render={({ field }) => (
                <Select
                  label="Gender"
                  defaultValue={row.user.gender}
                  required
                  data={['Male', 'Female']}
                  value={field.value}
                  onChange={(value) => field.onChange(value)}
                  error={errors.gender && errors.gender.message}
                  sx={{
                    marginTop: `${errors.gender ? '1rem' : '0'}`,
                  }}
                  radius="xs"
                  w={230}
                />
              )}
            />
          </Box>
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
            >
              <TextInput
                label="First Name"
                required
                radius={'xs'}
                w={230}
                value={row.user.firstName}
                {...register("firstName")}
              />
              <TextInput
                label="Middle Name"
                required
                radius={'xs'}
                w={230}
                value={row.user?.middleName!}
                {...register("middleName")}
              />
              <TextInput
                label="Last Name"
                required
                radius={'xs'}
                w={230}
                value={row.user.lastName}
                {...register("lastName")}
              />
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
              mt={20}
            >
              <TextInput
                label="SurName"
                required
                radius={'xs'}
                w={230}
                value={row.user.surname}
                {...register("surname")}
              />
              <TextInput
                label="Other Name"
                required
                radius={'xs'}
                w={230}
                value={row.user.otherName!}
                {...register("otherName")}
              />
              <TextInput
                label="Role"
                required
                radius={'xs'}
                w={230}
                readOnly
                value={row.user.role}
                // {...register("firstName")}
              />
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
              mt={20}
            >
              <TextInput
                label="Class"
                required
                radius={'xs'}
                w={230}
                value={row.klass!}
                {...register("klass")}
              />
              <TextInput
                label="Academic Year"
                required
                radius={'xs'}
                w={230}
                value={row.academicYear!}
              />
              <TextInput
                label="Admission Date"
                required
                radius={'xs'}
                w={230}
                readOnly
                value={row.admissionDate}
              />
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
              mt={20}
            >
              <TextInput
                label="Pre school Attended"
                required
                radius={'xs'}
                w={230}
                value={row.lastSchool!}
                {...register("lastSchool")}
              />
              <TextInput
                label="Mother's Name"
                required
                radius={'xs'}
                w={230}
                value={row.motherName!}
                {...register("motherName")}
              />
              <TextInput
                label="Father's Name"
                required
                radius={'xs'}
                w={230}
                readOnly
                value={row.fatherName!}
                {...register("fatherName")}
              />
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
              mt={20}
            >
              <TextInput
                label="Physical Deficiency"
                required
                radius={'xs'}
                w={230}
                value={row.health!}
                {...register("health")}
              />
              <TextInput
                label="Residential Address"
                required
                radius={'xs'}
                w={230}
                value={row.houseAddress!}
                {...register("houseAddress")}
              />
              <TextInput
                label="Day or Boarding"
                required
                radius={'xs'}
                w={230}
                readOnly
                value={row.dayOrBoarding}
                {...register("dayOrBoarding")}
              />
            </Flex>
            <Flex
              direction={{ base: 'column', sm: 'row' }}
              gap={{ base: 'sm', sm: 'lg' }}
              justify={{ sm: 'center' }}
              mt={20}
            >
              <TextInput
                label="Health"
                required
                radius={'xs'}
                w={230}
                value={row.health!}
                {...register("health")}
              />
              <TextInput
                label="Allergies"
                required
                radius={'xs'}
                w={230}
                value={row.allergies!}
                {...register("allergies")}
              />
              <TextInput
                label="Day or Boarding"
                required
                radius={'xs'}
                w={230}
                readOnly
                value={row.dayOrBoarding}
              />
            </Flex>
          
          <Box mt={20}>
            <Group position="right">
              <Button variant="light" onClick={close}>
                Cancel
              </Button>
              <Button 
               variant="filled"
                onClick={handleSubmit(onSubmit)}
                color="blue">
                Update
              </Button>
            </Group>
          </Box>
        </Modal>
        </form>
        <Modal
          opened={modalOpened}
          onClose={modalClose}
          title={`${row.user.firstName + "'s" + ' '}  Profile`}
          radius="xs"
          size="xl"
          closeOnClickOutside={false}
          closeOnEscape={false}
          fullScreen
          transitionProps={{ transition: 'fade', duration: 200 }}
        >
          <ViewStudentModal student={row} />
        </Modal>
        <Modal
          opened={modalOpenedDel}
          onClose={modalCloseDel}
          title={`Delete ${row.user.firstName}`}
          radius="xs"
          size="md"
          closeOnClickOutside={false}
          closeOnEscape={false}
          mt={100}
        >
          Are you sure you want to delete {row.user.firstName}?
          <Box mt={20}>
            <Group position="right">
              <Button variant="light" onClick={modalCloseDel}>
                Cancel
              </Button>
              <Button variant="filled" color="red">
                Delete
              </Button>
            </Group>
          </Box>
        </Modal>
      </>
    )
}

export default EditStudentIcon

